LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity keycode2ascii is
port (
	keys: in std_logic_vector(47 downto 0);
	ascii: out std_logic_vector(7 downto 0)
);
end keycode2ascii;

ARCHITECTURE LogicFunction OF keycode2ascii IS
BEGIN
	process(keys)
		variable shift  : std_logic;
		variable upper  : std_logic;
		variable caps 	 : std_logic;
		variable aux_keys: std_logic_vector(15 downto 0);
	begin
		IF NOT (keys(15 downto 0)=x"0012" OR keys(15 downto 0)=x"0059") THEN
			aux_keys := keys(15 downto 0);
		ELSIF NOT(keys(31 downto 16)=x"0012" OR keys(31 downto 16)=x"0059") THEN
			aux_keys := keys(31 downto 16);
		ELSIF NOT(keys(47 downto 32)=x"0012" OR keys(47 downto 32)=x"0059") THEN
			aux_keys := keys(47 downto 32);
		ELSE	
			aux_keys := keys(15 downto 0);
		END IF;
		
		IF ((keys(15 downto 0)=x"0012") OR (keys(31 downto 16)=x"0012") OR (keys(47 downto 32)=x"0012") OR (keys(15 downto 0)=x"0059") OR (keys(31 downto 16)=x"0059") OR (keys(47 downto 32)=x"0059")) THEN
			shift := '1';
		ELSE
			shift := '0';
		END IF;
		
		if (keys(15 downto 0)=x"0058" OR keys(31 downto 16)=x"0058" OR keys(47 downto 32)=x"0058") then
			caps := NOT caps;
		end if;
		
		upper := shift XOR caps;
		
		IF (upper = '1') THEN
			CASE aux_keys IS	
				WHEN x"0066"	=>	ascii	<=	"00001000";	--	BKSP
				WHEN x"0076"	=>	ascii	<=	"00011011";	--	ESC
				WHEN x"0029"	=>	ascii	<=	"00100000";	--	Space
				WHEN x"E071"	=>	ascii	<=	"01111111";	--	DEL
				WHEN x"005A"	=>	ascii	<=	"00001010";	--	Enter
				WHEN x"000D"	=>	ascii	<=	"00001001";	--	Tab
				WHEN x"001C"	=>	ascii	<=	"01000001";	--	A
				WHEN x"0032"	=>	ascii	<=	"01000010";	--	B
				WHEN x"0021"	=>	ascii	<=	"01000011";	--	C
				WHEN x"0023"	=>	ascii	<=	"01000100";	--	D
				WHEN x"0024"	=>	ascii	<=	"01000101";	--	E
				WHEN x"002B"	=>	ascii	<=	"01000110";	--	F
				WHEN x"0034"	=>	ascii	<=	"01000111";	--	G
				WHEN x"0033"	=>	ascii	<=	"01001000";	--	H
				WHEN x"0043"	=>	ascii	<=	"01001001";	--	I
				WHEN x"003B"	=>	ascii	<=	"01001010";	--	J
				WHEN x"0042"	=>	ascii	<=	"01001011";	--	K
				WHEN x"004B"	=>	ascii	<=	"01001100";	--	L
				WHEN x"003A"	=>	ascii	<=	"01001101";	--	M
				WHEN x"0031"	=>	ascii	<=	"01001110";	--	N
				WHEN x"0044"	=>	ascii	<=	"01001111";	--	O
				WHEN x"004D"	=>	ascii	<=	"01010000";	--	P
				WHEN x"0015"	=>	ascii	<=	"01010001";	--	Q
				WHEN x"002D"	=>	ascii	<=	"01010010";	--	R
				WHEN x"001B"	=>	ascii	<=	"01010011";	--	S
				WHEN x"002C"	=>	ascii	<=	"01010100";	--	T
				WHEN x"003C"	=>	ascii	<=	"01010101";	--	U
				WHEN x"002A"	=>	ascii	<=	"01010110";	--	V
				WHEN x"001D"	=>	ascii	<=	"01010111";	--	W
				WHEN x"0022"	=>	ascii	<=	"01011000";	--	X
				WHEN x"0035"	=>	ascii	<=	"01011001";	--	Y
				WHEN x"001A"	=>	ascii	<=	"01011010";	--	Z
				WHEN x"0045"	=>	ascii	<=	"00101001";	--	)
				WHEN x"0016"	=>	ascii	<=	"00100001";	--	!
				WHEN x"001E"	=>	ascii	<=	"01000000";	--	@
				WHEN x"0026"	=>	ascii	<=	"00100011";	--	#
				WHEN x"0025"	=>	ascii	<=	"00100100";	--	$
				WHEN x"002E"	=>	ascii	<=	"00100101";	--	%
				WHEN x"0036"	=>	ascii	<=	"00000000";	--	Â¨ -> Nao pertence a ASCII 
				WHEN x"003D"	=>	ascii	<=	"00100110";	--	&
				WHEN x"003E"	=>	ascii	<=	"00101010";	--	*
				WHEN x"0046"	=>	ascii	<=	"00101000";	--	(
				WHEN x"0052"	=>	ascii	<=	"00100010";	--	"
				WHEN x"004E"	=>	ascii	<=	"01011111";	--	_
				WHEN x"0055"	=>	ascii	<=	"00101011";	--	+
				WHEN x"0049"	=>	ascii	<=	"00111110";	--	>
				WHEN x"0041"	=>	ascii	<=	"00111100";	--	<
				WHEN x"000E"	=>	ascii	<=	"01111110";	--	~
				WHEN x"0054"	=>	ascii	<=	"01111011";	--	{
				WHEN x"005B"	=>	ascii	<=	"01111101";	--	}
				WHEN x"004C"	=>	ascii	<=	"00111010";	--	?
				WHEN x"004A"	=>	ascii	<=	"00111111";	--	:
				WHEN x"005D"	=>	ascii	<=	"01111100";	--	|
				WHEN x"0070"	=>	ascii	<=	"00110000";	--	Num0
				WHEN x"0069"	=>	ascii	<=	"00110001";	--	Num1
				WHEN x"0072"	=>	ascii	<=	"00110010";	--	Num2
				WHEN x"007A"	=>	ascii	<=	"00110011";	--	Num3
				WHEN x"006B"	=>	ascii	<=	"00110100";	--	Num4
				WHEN x"0073"	=>	ascii	<=	"00110101";	--	Num5
				WHEN x"0074"	=>	ascii	<=	"00110110";	--	Num6
				WHEN x"006C"	=>	ascii	<=	"00110111";	--	Num7
				WHEN x"0075"	=>	ascii	<=	"00111000";	--	Num8
				WHEN x"007D"	=>	ascii	<=	"00111001";	--	Num9
				WHEN x"E04A"	=>	ascii	<=	"00111011";	--	Num/
				WHEN x"0079"	=>	ascii	<=	"00101011";	--	Num+
				WHEN x"007B"	=>	ascii	<=	"00101101";	--	Num-
				WHEN x"007C"	=>	ascii	<=	"00101010";	--	Num*
				WHEN x"0071"	=>	ascii	<=	"00101110";	--	Num.
				WHEN x"E05A"	=>	ascii	<=	"00001010";	--	NumEnter
				WHEN OTHERS	   =>	ascii	<=	"00000000";		
			END CASE;	
		ELSE
			CASE aux_keys IS	
				WHEN x"0066"	=>	ascii	<=	"00001000";	--	BKSP
				WHEN x"0076"	=>	ascii	<=	"00011011";	--	ESC
				WHEN x"0029"	=>	ascii	<=	"00100000";	--	Space
				WHEN x"E071"	=>	ascii	<=	"01111111";	--	DEL
				WHEN x"005A"	=>	ascii	<=	"00001010";	--	Enter
				WHEN x"000D"	=>	ascii	<=	"00001001";	--	Tab
				WHEN x"001C"	=>	ascii	<=	"01100001";	--	a
				WHEN x"0032"	=>	ascii	<=	"01100010";	--	b
				WHEN x"0021"	=>	ascii	<=	"01100011";	--	c
				WHEN x"0023"	=>	ascii	<=	"01100100";	--	d
				WHEN x"0024"	=>	ascii	<=	"01100101";	--	e
				WHEN x"002B"	=>	ascii	<=	"01100110";	--	f
				WHEN x"0034"	=>	ascii	<=	"01100111";	--	g
				WHEN x"0033"	=>	ascii	<=	"01101000";	--	h
				WHEN x"0043"	=>	ascii	<=	"01101001";	--	i
				WHEN x"003B"	=>	ascii	<=	"01101010";	--	j
				WHEN x"0042"	=>	ascii	<=	"01101011";	--	k
				WHEN x"004B"	=>	ascii	<=	"01101100";	--	l
				WHEN x"003A"	=>	ascii	<=	"01101101";	--	m
				WHEN x"0031"	=>	ascii	<=	"01101110";	--	n
				WHEN x"0044"	=>	ascii	<=	"01101111";	--	o
				WHEN x"004D"	=>	ascii	<=	"01110000";	--	p
				WHEN x"0015"	=>	ascii	<=	"01110001";	--	q
				WHEN x"002D"	=>	ascii	<=	"01110010";	--	r
				WHEN x"001B"	=>	ascii	<=	"01110011";	--	s
				WHEN x"002C"	=>	ascii	<=	"01110100";	--	t
				WHEN x"003C"	=>	ascii	<=	"01110101";	--	u
				WHEN x"002A"	=>	ascii	<=	"01110110";	--	v
				WHEN x"001D"	=>	ascii	<=	"01110111";	--	w
				WHEN x"0022"	=>	ascii	<=	"01111000";	--	x
				WHEN x"0035"	=>	ascii	<=	"01111001";	--	y
				WHEN x"001A"	=>	ascii	<=	"01111010";	--	z
				WHEN x"0045"	=>	ascii	<=	"00110000";	--	0
				WHEN x"0016"	=>	ascii	<=	"00110001";	--	1
				WHEN x"001E"	=>	ascii	<=	"00110010";	--	2
				WHEN x"0026"	=>	ascii	<=	"00110011";	--	3
				WHEN x"0025"	=>	ascii	<=	"00110100";	--	4
				WHEN x"002E"	=>	ascii	<=	"00110101";	--	5
				WHEN x"0036"	=>	ascii	<=	"00110110";	--	6
				WHEN x"003D"	=>	ascii	<=	"00110111";	--	7
				WHEN x"003E"	=>	ascii	<=	"00111000";	--	8
				WHEN x"0046"	=>	ascii	<=	"00111001";	--	9
				WHEN x"0052"	=>	ascii	<=	"00100111";	--	'
				WHEN x"004E"	=>	ascii	<=	"00101101";	--	-
				WHEN x"0055"	=>	ascii	<=	"00111101";	--	=
				WHEN x"0049"	=>	ascii	<=	"00101110";	--	.
				WHEN x"0041"	=>	ascii	<=	"00101100";	--	,
				WHEN x"000E"	=>	ascii	<=	"01100000";	--	`
				WHEN x"0054"	=>	ascii	<=	"01011011";	--	[
				WHEN x"005B"	=>	ascii	<=	"01011101";	--	]
				WHEN x"004C"	=>	ascii	<=	"00111011";	--	/
				WHEN x"004A"	=>	ascii	<=	"00101111";	--	;
				WHEN x"005D"	=>	ascii	<=	"01011100";	--	\
				WHEN x"0070"	=>	ascii	<=	"00110000";	--	Num0
				WHEN x"0069"	=>	ascii	<=	"00110001";	--	Num1
				WHEN x"0072"	=>	ascii	<=	"00110010";	--	Num2
				WHEN x"007A"	=>	ascii	<=	"00110011";	--	Num3
				WHEN x"006B"	=>	ascii	<=	"00110100";	--	Num4
				WHEN x"0073"	=>	ascii	<=	"00110101";	--	Num5
				WHEN x"0074"	=>	ascii	<=	"00110110";	--	Num6
				WHEN x"006C"	=>	ascii	<=	"00110111";	--	Num7
				WHEN x"0075"	=>	ascii	<=	"00111000";	--	Num8
				WHEN x"007D"	=>	ascii	<=	"00111001";	--	Num9
				WHEN x"E04A"	=>	ascii	<=	"00111011";	--	Num/
				WHEN x"0079"	=>	ascii	<=	"00101011";	--	Num+
				WHEN x"007B"	=>	ascii	<=	"00101101";	--	Num-
				WHEN x"007C"	=>	ascii	<=	"00101010";	--	Num*
				WHEN x"0071"	=>	ascii	<=	"00101110";	--	Num.
				WHEN x"E05A"	=>	ascii	<=	"00001010";	--	NumEnter
				WHEN OTHERS	   =>	ascii	<=	"00000000";		
			END CASE;	
		END IF;
				
	end process;		
				
END LogicFunction ;